# はじめに
以下の基本ルールに従って、開発を行ってください。

# 基本ルール

## 指示に従う:
   - 要件や指示に従って作業を進める。
   - 作業の進捗や問題が発生した場合は適宜報告すること。
   - 指示内容に不明点がある場合は、勝手に進めず、指示者に確認すること。

## 自律的な問題解決:
   - エラーや何かしらの問題が発生したら、自律的に問題分析と解決案を提示すること。
   - 複数のアプローチがある場合は、推奨案を明示すること。
   - ソースコード外の問題である可能性がある場合は、指示者に報告すること。

## 既存コードの尊重:
   - 既存のコードスタイルやパターンがある場合には、それに従うこと。
   - 大幅な変更が必要な場合は理由を説明すること。

## 連続で修正に失敗した場合:
   - 2回以上連続でテストを失敗した時は、現在の状況を整理して指示者に報告すること。
   - 同じことを連続で行うのではなく、問題の解決策を提案すること。

## コーディングガイドライン
   - 先ずは指示内容の目的を理解し、目的を達成するようにステップバイステップで
     最適な処理の流れをしっかりと検討すること。
   - 使用言語はPythonとする。
   - 一つの関数は一つの責務を持つようにすること
   - エラーハンドリングを適切に実装すること
   - コメントは日本語とすること
   - AzureOpenAIへの接続は、utils.py の関数を利用すること。API接続情報は、api_gpt4o.json を使うこと。
   - utils.pyは変更不可とする。
   - 繰り返し処理を行う場合は進捗が分かるように表示すること。例えば、100件中31件目を処理中の場合は、「処理中：31/100」のように表示する。
   - すべての処理が完了した場合、「処理完了」と表示すること。

## 仕様書作成ガイドライン
   - 作業フォルダ内の複数ファイルで構成される場合は、
     まず全体を把握しステップバイステップで処理の流れをしっかりと理解すること。
   - html形式で保存すること
   - 以下の章立てとすること
      １．概要
      ２．使用ライブラリ
      ３．処理の流れ
      ４．フローチャート
      ５．シーケンス図
   - 図はMarmaidを用いること。
      - HTML構造: 基本的なHTML文書の構造を持ち、<head>内でMermaid.jsライブラリを読み込むこと。
      - スタイル: フロー図を見やすくするために、背景色やパディング、ボックスシャドウを設定すること。
      - Mermaidコード: <div class="mermaid">内に、フロー図の定義を記述すること。
   - ３．処理の流れ は、ポイントを文字列での箇条書きとすること。
   - ４．フローチャート は、分岐や並列処理がわかるように図で表すこと。
   - ５．シーケンス図は、参照しているpythonスクリプトのファイル名、入出力ファイル、外部APIの種類がわかるようにすること。
